"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const table_formatter_1 = require("./table-formatter");
const wcswidth = require("wcwidth");
function swidth(str) {
    const zwcrx = /[\u200B-\u200D\uFEFF\u00AD]/g;
    const match = str.match(zwcrx);
    return wcswidth(str) - (match ? match.length : 0);
}
function padding(len, str = ' ') {
    return str.repeat(len);
}
const stripTailPipes = (str) => str.trim().replace(/(^\||\|$)/g, '');
const splitCells = (str) => str.split('|');
const addTailPipes = (str) => `|${str}|`;
const joinCells = (arr) => arr.join('|');
const tableJustMap = {
    Left: ':-',
    Center: '::',
    Right: '-:',
};
function formatTable(text, settings = table_formatter_1.getAllSettings()) {
    const addTailPipesIfNeeded = settings.keepFirstAndLastPipes
        ? addTailPipes
        : (x) => x;
    let formatline = text[2].trim();
    const headerline = text[1].trim();
    let formatrow;
    let data;
    if (headerline.length === 0) {
        formatrow = 0;
        data = text[3];
    }
    else {
        formatrow = 1;
        data = text[1] + text[3];
    }
    const lines = data.trim().split(/\r?\n/);
    const justify = splitCells(stripTailPipes(formatline)).map(cell => {
        const trimmed = cell.trim();
        const first = trimmed[0];
        const last = trimmed[trimmed.length - 1];
        const ends = (first || ':') + (last || '-');
        if (ends === '--')
            return tableJustMap[settings.defaultTableJustification];
        else
            return ends;
    });
    const columns = justify.length;
    const colArr = Array.from(Array(columns));
    const cellPadding = padding(settings.spacePadding);
    const content = lines.map(line => {
        const cells = splitCells(stripTailPipes(line));
        if (columns - cells.length > 0) {
            cells.push(...Array(columns - cells.length).fill(''));
        }
        else if (columns - cells.length < 0) {
            cells[columns - 1] = joinCells(cells.slice(columns - 1));
        }
        return cells.map(cell => `${cellPadding}${cell.trim()}${cellPadding}`);
    });
    const widths = colArr.map((_x, i) => Math.max(2, ...content.map(cells => swidth(cells[i]))));
    if (settings.limitLastColumnPadding) {
        const preferredLineLength = atom.config.get('editor.preferredLineLength');
        const sum = (arr) => arr.reduce((x, y) => x + y, 0);
        const wsum = sum(widths);
        if (wsum > preferredLineLength) {
            const prewsum = sum(widths.slice(0, -1));
            widths[widths.length - 1] = Math.max(preferredLineLength - prewsum - widths.length - 1, 3);
        }
    }
    const just = function (str, col) {
        const length = Math.max(widths[col] - swidth(str), 0);
        switch (justify[col]) {
            case '::':
                return padding(length / 2) + str + padding((length + 1) / 2);
            case '-:':
                return padding(length) + str;
            case ':-':
                return str + padding(length);
            default:
                throw new Error(`Unknown column justification ${justify[col]}`);
        }
    };
    const formatted = content.map(cells => addTailPipesIfNeeded(joinCells(colArr.map((_x, i) => just(cells[i], i)))));
    formatline = addTailPipesIfNeeded(joinCells(colArr.map((_x, i) => {
        const [front, back] = justify[i];
        return front + padding(widths[i] - 2, '-') + back;
    })));
    formatted.splice(formatrow, 0, formatline);
    return ((formatrow === 0 && text[1] !== '' ? '\n' : '') +
        formatted.join('\n') +
        '\n');
}
exports.formatTable = formatTable;
//# sourceMappingURL=data:application/json;base64,