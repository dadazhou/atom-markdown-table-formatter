"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const regex_1 = require("./regex");
const formatTable_1 = require("./formatTable");
function getAllSettings() {
    return atom.config.get('markdown-table-formatter');
}
exports.getAllSettings = getAllSettings;
class TableFormatter {
    constructor() {
        this.subscriptions = new atom_1.CompositeDisposable();
        atom.workspace.observeTextEditors(editor => this.subscriptions.add(editor.getBuffer().onWillSave(() => {
            if (atom.config.get('markdown-table-formatter.formatOnSave')) {
                this.format(editor, true);
            }
        })));
    }
    destroy() {
        this.subscriptions.dispose();
    }
    format(editor, force = false) {
        let selectionsRanges = editor.getSelectedBufferRanges();
        const settings = getAllSettings();
        const bufferRange = editor.getBuffer().getRange();
        const selectionsRangesEmpty = selectionsRanges.every(i => i.isEmpty());
        if (!settings.markdownGrammarScopes.includes(editor.getGrammar().scopeName) &&
            selectionsRangesEmpty) {
            return undefined;
        }
        if (force || (selectionsRangesEmpty && settings.autoSelectEntireDocument)) {
            selectionsRanges = [bufferRange];
        }
        else {
            selectionsRanges = selectionsRanges
                .filter(srange => !(srange.isEmpty() && settings.autoSelectEntireDocument))
                .map(srange => {
                let { start } = bufferRange;
                let { end } = bufferRange;
                editor.scanInBufferRange(/^$/m, new atom_1.Range(srange.start, bufferRange.end), ({ range }) => (end = range.start));
                editor.backwardsScanInBufferRange(/^$/m, new atom_1.Range(bufferRange.start, srange.end), ({ range }) => (start = range.start));
                if (end.isLessThan(srange.end))
                    end = srange.end;
                if (start.isGreaterThan(srange.start))
                    start = srange.start;
                return new atom_1.Range(start, end);
            });
        }
        return editor.getBuffer().transact(() => selectionsRanges.map(range => editor.backwardsScanInBufferRange(regex_1.regex, range, function (obj) {
            return editor.setTextInBufferRange(obj.range, formatTable_1.formatTable(obj.match, settings));
        })));
    }
}
exports.TableFormatter = TableFormatter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3RhYmxlLWZvcm1hdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUErRTtBQUMvRSxtQ0FBK0I7QUFDL0IsK0NBQTJDO0FBRTNDO0lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUE7QUFDcEQsQ0FBQztBQUZELHdDQUVDO0FBRUQ7SUFFRTtRQURpQixrQkFBYSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUV4RCxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQ3pDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUNwQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNqQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7WUFDM0IsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUNILENBQ0YsQ0FBQTtJQUNILENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM5QixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQWtCLEVBQUUsUUFBaUIsS0FBSztRQUN0RCxJQUFJLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRSxDQUFBO1FBQ3ZELE1BQU0sUUFBUSxHQUFHLGNBQWMsRUFBRSxDQUFBO1FBRWpDLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNqRCxNQUFNLHFCQUFxQixHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBQ3RFLEVBQUUsQ0FBQyxDQUNELENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDO1lBQ3ZFLHFCQUNGLENBQUMsQ0FBQyxDQUFDO1lBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQTtRQUNsQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMscUJBQXFCLElBQUksUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFFLGdCQUFnQixHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDbEMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sZ0JBQWdCLEdBQUcsZ0JBQWdCO2lCQUNoQyxNQUFNLENBQ0wsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUNuRTtpQkFDQSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ1osSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLFdBQVcsQ0FBQTtnQkFDM0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLFdBQVcsQ0FBQTtnQkFDekIsTUFBTSxDQUFDLGlCQUFpQixDQUN0QixLQUFLLEVBQ0wsSUFBSSxZQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQ3hDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUNuQyxDQUFBO2dCQUNELE1BQU0sQ0FBQywwQkFBMEIsQ0FDL0IsS0FBSyxFQUNMLElBQUksWUFBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUN4QyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FDckMsQ0FBQTtnQkFDRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQTtnQkFDaEQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUE7Z0JBQzNELE1BQU0sQ0FBQyxJQUFJLFlBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUE7WUFDOUIsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDO1FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQ3RDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUMzQixNQUFNLENBQUMsMEJBQTBCLENBQUMsYUFBSyxFQUFFLEtBQUssRUFBRSxVQUM5QyxHQUFxQjtZQUVyQixNQUFNLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUNoQyxHQUFHLENBQUMsS0FBSyxFQUNULHlCQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FDakMsQ0FBQTtRQUNILENBQUMsQ0FBQyxDQUNILENBQ0YsQ0FBQTtJQUNILENBQUM7Q0FDRjtBQXJFRCx3Q0FxRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBSYW5nZSwgVGV4dEVkaXRvciwgQnVmZmVyU2NhblJlc3VsdCB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyByZWdleCB9IGZyb20gJy4vcmVnZXgnXG5pbXBvcnQgeyBmb3JtYXRUYWJsZSB9IGZyb20gJy4vZm9ybWF0VGFibGUnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxTZXR0aW5ncygpIHtcbiAgcmV0dXJuIGF0b20uY29uZmlnLmdldCgnbWFya2Rvd24tdGFibGUtZm9ybWF0dGVyJylcbn1cblxuZXhwb3J0IGNsYXNzIFRhYmxlRm9ybWF0dGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzdWJzY3JpcHRpb25zID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBhdG9tLndvcmtzcGFjZS5vYnNlcnZlVGV4dEVkaXRvcnMoZWRpdG9yID0+XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKFxuICAgICAgICBlZGl0b3IuZ2V0QnVmZmVyKCkub25XaWxsU2F2ZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKGF0b20uY29uZmlnLmdldCgnbWFya2Rvd24tdGFibGUtZm9ybWF0dGVyLmZvcm1hdE9uU2F2ZScpKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1hdChlZGl0b3IsIHRydWUpXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICksXG4gICAgKVxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmRpc3Bvc2UoKVxuICB9XG5cbiAgcHVibGljIGZvcm1hdChlZGl0b3I6IFRleHRFZGl0b3IsIGZvcmNlOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICBsZXQgc2VsZWN0aW9uc1JhbmdlcyA9IGVkaXRvci5nZXRTZWxlY3RlZEJ1ZmZlclJhbmdlcygpXG4gICAgY29uc3Qgc2V0dGluZ3MgPSBnZXRBbGxTZXR0aW5ncygpXG5cbiAgICBjb25zdCBidWZmZXJSYW5nZSA9IGVkaXRvci5nZXRCdWZmZXIoKS5nZXRSYW5nZSgpXG4gICAgY29uc3Qgc2VsZWN0aW9uc1Jhbmdlc0VtcHR5ID0gc2VsZWN0aW9uc1Jhbmdlcy5ldmVyeShpID0+IGkuaXNFbXB0eSgpKVxuICAgIGlmIChcbiAgICAgICFzZXR0aW5ncy5tYXJrZG93bkdyYW1tYXJTY29wZXMuaW5jbHVkZXMoZWRpdG9yLmdldEdyYW1tYXIoKS5zY29wZU5hbWUpICYmXG4gICAgICBzZWxlY3Rpb25zUmFuZ2VzRW1wdHlcbiAgICApIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gICAgaWYgKGZvcmNlIHx8IChzZWxlY3Rpb25zUmFuZ2VzRW1wdHkgJiYgc2V0dGluZ3MuYXV0b1NlbGVjdEVudGlyZURvY3VtZW50KSkge1xuICAgICAgc2VsZWN0aW9uc1JhbmdlcyA9IFtidWZmZXJSYW5nZV1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0aW9uc1JhbmdlcyA9IHNlbGVjdGlvbnNSYW5nZXNcbiAgICAgICAgLmZpbHRlcihcbiAgICAgICAgICBzcmFuZ2UgPT4gIShzcmFuZ2UuaXNFbXB0eSgpICYmIHNldHRpbmdzLmF1dG9TZWxlY3RFbnRpcmVEb2N1bWVudCksXG4gICAgICAgIClcbiAgICAgICAgLm1hcChzcmFuZ2UgPT4ge1xuICAgICAgICAgIGxldCB7IHN0YXJ0IH0gPSBidWZmZXJSYW5nZVxuICAgICAgICAgIGxldCB7IGVuZCB9ID0gYnVmZmVyUmFuZ2VcbiAgICAgICAgICBlZGl0b3Iuc2NhbkluQnVmZmVyUmFuZ2UoXG4gICAgICAgICAgICAvXiQvbSxcbiAgICAgICAgICAgIG5ldyBSYW5nZShzcmFuZ2Uuc3RhcnQsIGJ1ZmZlclJhbmdlLmVuZCksXG4gICAgICAgICAgICAoeyByYW5nZSB9KSA9PiAoZW5kID0gcmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgIClcbiAgICAgICAgICBlZGl0b3IuYmFja3dhcmRzU2NhbkluQnVmZmVyUmFuZ2UoXG4gICAgICAgICAgICAvXiQvbSxcbiAgICAgICAgICAgIG5ldyBSYW5nZShidWZmZXJSYW5nZS5zdGFydCwgc3JhbmdlLmVuZCksXG4gICAgICAgICAgICAoeyByYW5nZSB9KSA9PiAoc3RhcnQgPSByYW5nZS5zdGFydCksXG4gICAgICAgICAgKVxuICAgICAgICAgIGlmIChlbmQuaXNMZXNzVGhhbihzcmFuZ2UuZW5kKSkgZW5kID0gc3JhbmdlLmVuZFxuICAgICAgICAgIGlmIChzdGFydC5pc0dyZWF0ZXJUaGFuKHNyYW5nZS5zdGFydCkpIHN0YXJ0ID0gc3JhbmdlLnN0YXJ0XG4gICAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydCwgZW5kKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBlZGl0b3IuZ2V0QnVmZmVyKCkudHJhbnNhY3QoKCkgPT5cbiAgICAgIHNlbGVjdGlvbnNSYW5nZXMubWFwKHJhbmdlID0+XG4gICAgICAgIGVkaXRvci5iYWNrd2FyZHNTY2FuSW5CdWZmZXJSYW5nZShyZWdleCwgcmFuZ2UsIGZ1bmN0aW9uKFxuICAgICAgICAgIG9iajogQnVmZmVyU2NhblJlc3VsdCxcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGVkaXRvci5zZXRUZXh0SW5CdWZmZXJSYW5nZShcbiAgICAgICAgICAgIG9iai5yYW5nZSxcbiAgICAgICAgICAgIGZvcm1hdFRhYmxlKG9iai5tYXRjaCwgc2V0dGluZ3MpLFxuICAgICAgICAgIClcbiAgICAgICAgfSksXG4gICAgICApLFxuICAgIClcbiAgfVxufVxuIl19